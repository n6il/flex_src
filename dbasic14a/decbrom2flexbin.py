import sys
import struct

pairs = (
 (0xC000, 0xC0A3, 0xC000),
 (0xC0A6, 0xC0B2, 0xC0AF),
 (0xC0B3, 0xC0C1, 0xC0C1),
 (0xC0C4, 0xC0CB, 0xC0D0),
 (0xC0F6, 0xC17E, 0xC0F6),
 (0xC17F, 0xC299, 0xE600),
 (0xC334, 0xC338, 0xE71C),
 (0xC426, 0xC480, 0xE721),
 (0xC49B, 0xC4A6, 0xE790),
 (0xC50B, 0xC50C, 0xE7C1),
 (0xC50F, 0xC513, 0xE7C7),
 (0xC55E, 0xC565, 0xE7D8),
 (0xC58F, 0xC5A4, 0xE7E2),
 (0xC6C5, 0xC6C7, 0xE843),
 (0xC714, 0xC724, 0xE855),
 (0xC7FE, 0xC87A, 0xE866),
 (0xC884, 0xC9BD, 0xE909),
 (0xC9C5, 0xC9CF, 0xEA59),
 (0xC9DA, 0xCA61, 0xEA6B),
 (0xCB4A, 0xCB6C, 0xEAFE),
 (0xCBEB, 0xCBF1, 0xEB47),
 (0xCC02, 0xCC07, 0xEB7E),
 (0xCC3D, 0xCC43, 0xEBC9),
 (0xCC5B, 0xCD02, 0xEBD0),
 (0xCD18, 0xCD35, 0xEC7C),
 (0xCD3A, 0xCD5C, 0xEC9F),
 (0xCDC0, 0xCDC9, 0xECCF),
 (0xCDE9, 0xCEA9, 0xECFC),
 (0xCEAE, 0xCEB4, 0xEDBE),
 (0xCEBF, 0xCEC7, 0xEDEF),
 (0xCED0, 0xCEEB, 0xEE00),
 (0xCEF6, 0xCF09, 0xEE22),
 (0xCF12, 0xCF1D, 0xEE42),
 (0xCF1E, 0xCF3E, 0xEE59),
 (0xCF63, 0xCF6D, 0xEE90),
 (0xCF75, 0xCF7C, 0xEEAA),
 (0xCF8A, 0xD0CE, 0xEEB2),
 (0xD0CF, 0xD174, 0xEFFE),
 (0xD1E5, 0xD20E, 0xF0A4),
 (0xD3FF, 0xD4A0, 0xF0CE),
 (0xD616, 0xD61A, 0xF188),
 (0xD65B, 0xD66B, 0xF18D),
 (0xD7BB, 0xD7CE, 0xF19E),
 (0xD7DA, 0xD7DC, 0xF1B5),
)

infn, outfn, addr = sys.argv[1:4]
baseAddr = eval(addr)

inf = open(infn, "rb")
outf = open(outfn, "wb")

for startAddr, endAddr, newAddr in pairs:
    offset = startAddr - baseAddr
    length = endAddr - startAddr + 1 # inclusive
    inf.seek(offset, 0)
    print("BLOCK: S:%04x E:%04x L:%04x" % (startAddr, endAddr, length))
    while length > 0:
        wlen = min(255, length)
        data = inf.read(wlen)
        print("  %04x -> %04x %02x" % (startAddr, newAddr, wlen))
        wdata = struct.pack(">BHB%ds" % wlen, 0x02, newAddr, wlen, data)
        outf.write(wdata)
        newAddr += wlen
        startAddr += wlen
        length -= wlen
    
